Entrada e saída de dados

  alert - aparece uma caixa de alerta na tela
  prompt - cria uma caixa para entrada de dados
    obs: o prompt utiliza os dados no formato string, para tratar dados numericos precisa- converte-los
  converter tipos primitivos - valores númericos(Number.parseInt(variavel) para inteiros, Number.parseFloat(variavel) para    reais ou só Number(variavel)), strings(variavel.toString() ou String(variavel))
  var, let - cria uma variavel
    obs: primeiro cria-se o identificador da variavel seguido de um =(recebe).
  typeof - mostra o tipo da variavel
  para a saída de dados utiliza-se o + para concatenação(unir uma string a uma variavel) ou utilizar a frase entre crase(`)   e um placeholder ${variavel}
  para saida de dados na tela do html utiliza-se document.write()
  variavel.length() - mostra quantos caracteres a string tem
  variavel.toUpperCase() - transforma os caracteres das strings em maiusculas
  variavel.toLowerCase() - transforma os caracteres das strings em minusculas
  variavel.toFixed(casas decimais) - utiliza-se em numeros reais, monstrando quantas casas decimais irão aparecer
  .replace('', '') - troca um valor por outro
  para transformar um numero em dinheiro(real por exemplo) utiliza-se variavel.toLocaleString('pt-BR', {style: 'currency',   currency: 'BRL'})

Operadores
 
  Aritmeticos
    
    + - adição
    - - subtração
    * - multiplicação
    / - divisão
    % - resto da divisão
    ** - potênciação
    () - parenteses

    Ordem de precedencia

    () - parenteses
    ** - potenciação
    *, /, % - multiplicação, divisão e resto da divisão
    +, - - adição e subtração

    Simplificando atribuições
   
       Ao realizar uma conta de n = n + 2 por exemplo, pode-se simplificar da seguinte forma: n += 2, n = n - 2: n -= 2

       Incremento:	

         Ao realizar uma conta de n = n + 1 por exemplo, pode-se simplificar da seguinte forma: n ++, n = n - 1: n --, para          para contas onde o operando é 1. Esses são os pós-incremento, ou seja, o resultado vem após o incremento, e temos          o pre-incremento, ou seja, o resultado vem antes da atribuição, ao inves de utilizar n ++ ou n --,                   utliza-se operador antes da variavel, ficando ++ n ou -- n

  Relacionais
  
    > - maior que
    < - menor que
    == - igual
    >= - maior ou igual
    <= - menor ou igual
    != diferente
    === - identico
    !== - diferente restrito
      obs: todos os operadores retornam o valor true ou false

  Lógicos
  
    ! - negação(não) 
    && - conjunção(e) 
    || - disjunção(ou)

    Ordem de precedencia

    (), **, / - aritmeticos
    >, <, ==, != - relacionais
    ! - logico
    && - logico
    || - logico

  Ternario 

    ? - teste logico(true ou false)
    : - retorna o valor true ou false
      exemplo: idade = 18, var maioridade = idade >= 18? 'MAIOR': 'MENOR'(idade é maior ou igual a 18? se sim(true),             maioridade recebe 'MAIOR', se nao(false), maioridade recebe 'MENOR')

DOM

  O DOM(Documento Object Model) é o conjunto de objetos que compõe a estrutura de um site(head, body, por exemplo).
  
  Para representar um objeto do DOM, utilizamos o ponto seguido o objeto, por exemplo, window.documento.
  Podemos selecionar o objeto por marca(tag) utilizando o comando getElementsByTagName('nome da tag')[1ª, 2ª... tag]
  Podemos selecionar o objeto por id(identificador no HTML) utilizando getElementById('id do elemento')
  Podemos selecionar o objeto por nome(identificador no HTML) utilizando getElementsByName('name do elemento')[1ª, 2ª...   tag]
  Podemos selecionar o objeto por seletor(igual as CSS) utilizando querySelector('elemento com .(class) ou #(id)')

Eventos no DOM
 
  Podemos identificar quando ocorre um evento em um elemento do dom, por exemplo, um clique do mouse(click), o mouse entrar   em um elemento(mouseenter), o mouse sair de um elemento(mouseout), e trabalhar com isso no javascript criando uma função    ( function nome(){}) em cima o evento no DOM. Podemos identificar os eventos no html, criando os parametros do evento,     onclick(click) = 'função()', onmouseenter(mouseenter) = 'função()', onmouseout(mouseout) = 'função()', por exemplo, ou no   próprio javascript com o addEventListener.

Um bloco é representado por chaves({})

Condições

  Simples

    if(condição){
      comando
    }

  Composta
 
    if(condição){
      comando
    }else{
        comando
    }

  Mútilplas

    switch(expressão){
      case valor 1:
        comando
        break
      case valor 2:
        comando
	break
      case valor 3:
	comando
	break
      default:(obs: caso os de cima não sejam satisfeitos)
	comando
        break	
    }
	obs: o break é obrigatório após o fim de cada case, caso nao tenha o break, ele irá executar todos os comandos         debaixo até encontrar o primeiro break.

Para pegar a hora atual basta criar uma variavel que recebe o codigo new Date(), criar outra variavel que vai receber a primeira variavel.getHours()

Laços de repetição

  Com teste lógico no início
  
    While(enquanto) é usado para laços de repetição com teste lógico no início. while(condição){código}.

  Com teste lógico no final

    Do(faça) é usado para laços de repetição com teste lógico no final. do{código}while(condição).
  

  