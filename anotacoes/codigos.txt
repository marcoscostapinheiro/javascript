Entrada e saída de dados

  alert - aparece uma caixa de alerta na tela
  prompt - cria uma caixa para entrada de dados
    obs: o prompt utiliza os dados no formato string, para tratar dados numericos precisa- converte-los
  converter tipos primitivos - valores númericos(Number.parseInt(variavel) para inteiros, Number.parseFloat(variavel) para    reais ou só Number(variavel)), strings(variavel.toString() ou String(variavel))
  var, let - cria uma variavel
    obs: primeiro cria-se o identificador da variavel seguido de um =(recebe).
  typeof - mostra o tipo da variavel
  para a saída de dados utiliza-se o + para concatenação(unir uma string a uma variavel) ou utilizar a frase entre crase(`)   e um placeholder ${variavel}
  para saida de dados na tela do html utiliza-se document.write()
  variavel.length() - mostra quantos caracteres a string tem
  variavel.toUpperCase() - transforma os caracteres das strings em maiusculas
  variavel.toLowerCase() - transforma os caracteres das strings em minusculas
  variavel.toFixed(casas decimais) - utiliza-se em numeros reais, monstrando quantas casas decimais irão aparecer
  .replace('', '') - troca um valor por outro
  para transformar um numero em dinheiro(real por exemplo) utiliza-se variavel.toLocaleString('pt-BR', {style: 'currency',   currency: 'BRL'})

Operadores
 
  Aritmeticos
    
    + - adição
    - - subtração
    * - multiplicação
    / - divisão
    % - resto da divisão
    ** - potênciação
    () - parenteses

    Ordem de precedencia

    () - parenteses
    ** - potenciação
    *, /, % - multiplicação, divisão e resto da divisão
    +, - - adição e subtração

    Simplificando atribuições
   
       Ao realizar uma conta de n = n + 2 por exemplo, pode-se simplificar da seguinte forma: n += 2, n = n - 2: n -= 2

       Incremento:	

         Ao realizar uma conta de n = n + 1 por exemplo, pode-se simplificar da seguinte forma: n ++, n = n - 1: n --, para          para contas onde o operando é 1. Esses são os pós-incremento, ou seja, o resultado vem após o incremento, e temos          o pre-incremento, ou seja, o resultado vem antes da atribuição, ao inves de utilizar n ++ ou n --,                   utliza-se operador antes da variavel, ficando ++ n ou -- n

  Relacionais
  
    > - maior que
    < - menor que
    == - igual
    >= - maior ou igual
    <= - menor ou igual
    != diferente
    === - identico
    !== - diferente restrito
      obs: todos os operadores retornam o valor true ou false

  Lógicos
  
    ! - negação(não) 
    && - conjunção(e) 
    || - disjunção(ou)

    Ordem de precedencia

    (), **, / - aritmeticos
    >, <, ==, != - relacionais
    ! - logico
    && - logico
    || - logico

  Ternario 

    ? - teste logico(true ou false)
    : - retorna o valor true ou false
      exemplo: idade = 18, var maioridade = idade >= 18? 'MAIOR': 'MENOR'(idade é maior ou igual a 18? se sim(true),             maioridade recebe 'MAIOR', se nao(false), maioridade recebe 'MENOR')

DOM

  O DOM(Documento Object Model) é o conjunto de objetos que compõe a estrutura de um site(head, body, por exemplo).
  
  Para representar um objeto do DOM, utilizamos o ponto seguido o objeto, por exemplo, window.documento.
  Podemos selecionar o objeto por marca(tag) utilizando o comando getElementsByTagName('nome da tag')[1ª, 2ª... tag]
  Podemos selecionar o objeto por id(identificador no HTML) utilizando getElementById('id do elemento')
  Podemos selecionar o objeto por nome(identificador no HTML) utilizando getElementsByName('name do elemento')[1ª, 2ª...   tag]
  Podemos selecionar o objeto por seletor(igual as CSS) utilizando querySelector('elemento com .(class) ou #(id)')

Eventos no DOM
 
  Podemos identificar quando ocorre um evento em um elemento do dom, por exemplo, um clique do mouse(click), o mouse entrar   em um elemento(mouseenter), o mouse sair de um elemento(mouseout), e trabalhar com isso no javascript criando uma função    ( function nome(){}) em cima o evento no DOM. Podemos identificar os eventos no html, criando os parametros do evento,      onclick(click) = 'função()', onmouseenter(mouseenter) = 'função()', onmouseout(mouseout) = 'função()', por exemplo, ou no   próprio javascript com o addEventListener.

Um bloco é representado por chaves({})

Condições

  Simples

    if(condição){
      comando
    }

  Composta
 
    if(condição){
      comando
    }else{
        comando
    }

  Mútilplas

    switch(expressão){
      case valor 1:
        comando
        break
      case valor 2:
        comando
	break
      case valor 3:
	comando
	break
      default:(obs: caso os de cima não sejam satisfeitos)
	comando
        break	
    }
	obs: o break é obrigatório após o fim de cada case, caso nao tenha o break, ele irá executar todos os comandos         debaixo até encontrar o primeiro break.

Para pegar a hora atual basta criar uma variavel que recebe o codigo new Date(), criar outra variavel que vai receber a primeira variavel.getHours()

Laços de repetição

  Com teste lógico no início
  
    While(enquanto) é usado para laços de repetição com teste lógico no início. while(condição){código}.

  Com teste lógico no final

    Do(faça) é usado para laços de repetição com teste lógico no final. do{código}while(condição).

Variáveis compostas(Arrays/Vetores)

  Uma variável composta é capaz de armazenar varios dados, diferente da variável simples que armazena apenas um. É composto   por seu elemento(espaço na variável), seu valor(dado que está dentro do elemento) e sua chave de identificação(sendo 0 a    primeira posição).                  -------- valor
    ex:      variável composta - num  |
                                 |1|2|3|------- elemento
 				  0 1 2
                                  |-|-|
				    |
				    |___________ chave de identificação

  Para se declarar uma variável composta utilizamos o var num[1, 2, 3], a cada valor adicionado utilizamos uma vírgula.
  Para adicionar um valor ao primeiro elemento da array utilizamos o metodo interno unshift, ficando: variavel.unshift        (valor).
  

  Métodos e propriedades

    Utilizamos propriedades para obtermos uma informação sobre o array ou objeto, array.length por exemplo.
    Métodos servem como funções, ja pre-criadas pelo próprio javascript, array.toUpperCase() por exemplo, diferente das         propriedades, os métodos utilizam os () no final, igualmente as funções.
    Para remover um valor do primeiro elemento da array utilizamos o metodo interno shift, ficando: variavel.shift().
    Para adicionar um valor ao último elemento da array utilizamos o metodo interno push, ficando: variavel.push(valor).
    Para remover um valor do último elemento da array utilizamos o metodo interno pop, ficando: variavel.pop().
    Para encontrar o primeiro indice com valor da array utilizamos o metodo interno indexOf, ficando: variavel.indexOf          (valor), retornará a chave do primeiro valor encontrado.
    Para encontrar o último indice com valor da array utilizamos o metodo interno lastIndexOf, ficando:                         variavel.lastIndexOf(valor), retornará a chave do último valor encontrado.
    Podemos verificar se um elemento existe dentro da variavel com o metodo interno inclues, ficando: variavel.includes         (valor).
    Podemos mostrar o array apartir de um índice com o metodo interno slice, ficando: variavel.slice(indice de partida),        este metodo retorna toda a array apartir do indice selecionado, para ter um indice inicial e final(começa em um             indice e vai ate outro indice escolhido) precisamos utilizar 2 parametros no metodo, ficando: variavel(inicio, fim).        Com números negativos como indice final, ele remove as ultimas propriedades da array, exemplo: -2 removeria as duas         ultimas propriedades. Com indice inicial negativo, a contagem é de trás pra frente, sendo -1 o ultimo indice.
    O metodo forEach retorna todo o valor da array, mas para isso precisamos criar uma arrow function, em uma array de          numeros por exemplo, ficando: variavel.forEach(num => {console.log(num)}), retornará cada valor da array.
    Para organizar os valores em ordem crescente utilizamos o metodo interno sort, ficando: variavel.sort().
    for simplificado e otimizado para arrays e objects: for(var pos in variavel){}. Leia-se da seguinte forma: para cada        posição na variável composta.
    O metodo reverse inverte uma array, deixando-a de trá pra frente, ficando: variavel.reverse().
    O metodo trim remove tudo que nao for string em uma array, inclusive espaços, ficando: variavel.trim().
    O metodo padstart padroniza uma string, deixando-o com um tamanho maximo permitido, ficando: variavel.padStart(valor        maximo, string).
    O metodo split separa a string apartir da string selecionada(um espaço por exemplo), retornando uma array, ficando:         variavel.split('string separadora').
    O metodo join é o contrario do split, ele junta strings apartir de um separador, ficando: variavel.join(string              separadora).
    O metodo repeat repete uma palavra quantas vezes for mandada, ficando: 'palavra'.repeat(numero de repetições).
    Para encontrar um valor dentor de um array utilizamos o metodo iterno indexOf, ficando: variavel.indexOf(valor              desejado). Retornando a posição onde o valor foi encontrado, se não encontrar, ele retorna -1.

  Destructing 

    Podemos copiar valores dentro de um array para outro, utilizando colchetes, ficando: let [nome da variavel a ser            criada] = array a ser copiado, as posições das variaveis influencia qual propriedade será copiada, exemplo: let [ex1        (primeira posição), ex2(segunda posição)].

Objetos

  Objetos são arrays que podemos definir um nome para cada elemento criado, por exemplo let obj = {nome: 'Marcos',
                                                                                                   Idade: 18},
  porém, diferente dos arrays, objetos utilizam as chaves, para acessar cada elemento deve-se pegar o nome criado para        aquele elemento e utilizar como uma propriedade, obj.nome(retorna 'Marcos') por exemplo
  Para criar um método deve-se criar uma function dentro do objeto e depois invocá-la como o exemplo de métodos acima.
  Podemos adicionar ou remover uma propriedade de um objeto. Para adicionar basta escrever o nome do objeto seguido da        propriedade que deseja criar, obj.exemplo = 'Teste' por exemplo. Para remover basta escrever delete seguido do objeto com   a propriedade a ser excluída, delete obj.teste por exemplo.
  Podemos copiar as propriedades de um objeto para outro, basta utilizar Object.assign(objeto onde será copiado, objeto a     ser copiado).
  Podemos obter as chaves do objeto(nome da propriedade) com Object.keys(objeto), irá retornar uma array com todas as         chaves que compõem o objeto.
  Mutação - podemos criar um objeto apartir de outro, por exemplo, let objt2 = objt, porém, qualquer mudança feita em ambos   os objetos, será aplicada a ambos.

  Orientação a objetos

    This faz referencia a uma propriedade dentro do proprio objeto, this.propriedade.
    Prototype é o objeto pai de outro objeto, com ele podemos utilizar metodos do objeto pai no objeto filho. Todo objeto       criado do 0 tem como prototype o Object. Objetos que herdam outros objetos, o objeto base será o prototype do objeto        que herdou, sendo assim, ele poderá utilizar metodos e propriedades compartilhadas do seu prototype.
    Classes funcionam como um molde para utilizar em seus objetos filhos, como por exemplo: let cachorro = {raca: 'SRD',        patas: 4}, apartir dai pode-se criar um objeto filho que herdará essas propriedades, e esse prototype servirá como uma      classe, let labrador = Object.create(cachorro), labrador.raca = 'Labrador'.
    Instanciar é criar um novo objeto, utilizando funções podemos criar propriedades ja predefinidas, com a utilização de       funções, ficando: function criarCachorro(raca, cor){
                                                        let cachorro = Object.create({})
                                                        cachorro.raca = raca
                                                        cachorro.cor = cor
                                                        return cachorro
                                                       }
    com a utilação do new: function Cachorro(raca, cor){
                                                        this.raca = raca
                                                        this.cor = cor
                                                       }
    apartir daí pode-se criar um objeto que herdará essas proriedades, assim: let pitbull(qualquer raça que desejar) =          criarCachorro(raca, cor), com new: let pitbull = new Cachorro('Pitbull', 'Caramelo').
    É importante separar metodos de propriedades, com a utilização das classes é importante utilizar apenas propriedades na     criação de classes, para implementar metodos precisa-se utilizar o constructor, ficando: Cachorro.prototype.uivar =         function(){console.log('Auuuu')}
    Com o ES6 já é possivel utilizar o class constructor, ficando assim: class Cachorro{
                                                                                        constructor(raca, cor){
                                                                                          this.raca = raca
                                                                                          this.cor = cor
                                                                                        }
                                                                                       }
    let pinscher  = new Cachorro('Pinscher', 'Preto'). Constructor nao aceita novas propriedades sem ser as pre-definidas,      para criar novas propriedades é necessario a utilização do prototype. Sempre com a primeira letra da classe maíuscula.

    Override. Sempre que é instanciado uma nova classe, é criada uma identica no prototype, podemos modificar a do         prototype com o override, utilizando: NomeDoPrototype.prototype.nomeDaPropriedade = exemplo.

    Symbol é uma maneira de criar constante no objeto, uma vez criada, seu valor nao poderá mais ser modificado, cria-se     assim: ClasseExemplo.prototype[nomeDaConstante] = 'exemplo', para invocá-la: ClasseExemplo.prototype[nomeDaConstante].

    Get e Set, get serve para retornar valores de um objeto, o set serve para alterá-los. Set: set setCor(cor){this.cor =     cor}. Get: get getExemplo(){return this.exemplo}. para invocar o set utilizamos: objeto.setCor = 'exemplo'

  Destructing 

    Podemos copiar valores dentro de um object para outro, utilizando chaves, ficando: let {nome da variavel a ser              criada: nome da variavel a ser copiada} = object a ser copiado, as posições dos objects influencia qual propriedade         será copiada, exemplo: let{ex1: teste(copia a primeira posição do object), ex2: teste1(copia a segunda opção do             object)}.
  
Funções

  Uma função possui uma chamada(inicia a função), um parâmetro(valor que fica dentro do parenteses da função), ação(código    a ser executado quando a função é chamada) e um retorno(retorna o resultado da ação).
                         ___ parâmetro 
                        |
    ex: function parimp(n){
      if (n % 2 == 0){ -------- ação
        return 'PAR' -------- retorno
      }
      else{
        return 'ÍMPAR'
      }
    }

    var res = parimp(2) ------- chamada

  Temos parâmetros pre-definidos(function soma(n1 = 0, n2 = 0)){}, esses parâmetros só são substituídos quando você passa     os parâmetros na chamada.

  Podemos utilizar parametros ilimitados com a utilização de argumentos, com a utilização de arguments dentro da função,   exemplo de função soma com arguments: function soma(){
                                                        let soma = 0
                                                        for(let i = 0; i < arguments.length; i++){
                                                          soma += arguments[i]
                                                        }
                                                        return soma
                                                       }
  invocando a função com a passagem de paramentros: soma(1, 2) retona 3, soma(1, 2, 3) retorna 6, pode-se utilizar quantos   parametros quiser, arguments armazena valores como se fosse uma array, por isso a utilização do arguments[i].

  Closure

    O closure é uma forma de acessar um escopo léxico de uma função pai de outra função.

  Recursion

    Invoca a função dentro da mesma função.

  Rest Operator

    Faz com que a função possa receber parametros ilimitados, utiliza-se o ...args(pode ser qualquer nome), ficando:         function função(...args){}.

  Gerar número aleatórios com um valor mínimo e máximo = Math.floor(Math.random() * (máximo - mínimo + 1)) + mínimo

  Math.floor arredonda o número quebrado no menor numero inteiro próximo, o Math.random gera números aleatórios entre 0 e 1

JSON

  JavaScript Object Notation é uma forma objeto, tanto que é escrito como se fosse um objeto, é utilizado na troca de     dados, tanto para receber, quanto para enviar, exemplo let ex = {"nome": "Marcos", "idade": 19, "ocupacao":         "Programador"}, sempre utilizando aspas duplas na propriedade e no valor(se for uma string).
  Podemos transformar o JSON em uma string utilizando o stringify, ficando: let txt = JSON.stringify(JSON a ser convertido)
  Para converter uma string a JSON novamente utiliza-se parse, ficando: let exJson = JSON.parse(string a ser convertida).